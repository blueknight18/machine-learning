{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tf.reset_default_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "mnist = input_data.read_data_sets(\"data\", one_hot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def weight(shape):\n",
    "    ini = tf.truncated_normal(shape, stddev=0.1)\n",
    "    return tf.Variable(ini)\n",
    "\n",
    "def bias(shape):\n",
    "    ini = tf.constant(0.1, shape = shape)\n",
    "    return tf.Variable(ini)\n",
    "\n",
    "def conv_layer(inpu, shape, strides=[1,1,1,1]):\n",
    "    W = weight(shape)\n",
    "    b = bias([shape[3]])\n",
    "    return tf.nn.relu(tf.nn.conv2d(inpu, W, strides=strides, padding=\"SAME\")+b)\n",
    "\n",
    "def fully_connected(inpu, outpu):\n",
    "    W = weight([int(inpu.get_shape()[1]), outpu])\n",
    "    b = bias([outpu])\n",
    "    return tf.matmul(inpu, W) + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X = tf.placeholder(tf.float32, shape=[None, 784])\n",
    "x_image = tf.reshape(X, [-1,28,28,1])\n",
    "y = tf.placeholder(tf.float32, shape=[None,10])\n",
    "keep_prob = tf.placeholder(tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#9 convolution layers, 3 pool layers, 4 dropouts\n",
    "\n",
    "# the first block of convolution layers\n",
    "conv1_1 = conv_layer(X, shape=[3,3,1,32])\n",
    "conv1_2 = conv_layer(conv1_1, shape=[3,3,32,32])\n",
    "conv1_3 = conv_layer(conv1_2, shape=[3,3,32,32])\n",
    "conv1_pool = tf.nn.max_pool(conv1_3, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\")\n",
    "conv1_drop = tf.nn.dropout(conv1_pool, keep_prob=keep_prob)\n",
    "\n",
    "# the second block of convolution layers\n",
    "conv2_1 = conv_layer(conv1_drop, shape=[3,3,32,64])\n",
    "conv2_2 = conv_layer(conv2_1, shape=[3,3,64,64])\n",
    "conv2_3 = conv_layer(conv2_2, shape=[3,3,64,64])\n",
    "conv2_pool = tf.nn.max_pool(conv2_3, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\")\n",
    "conv2_drop = tf.nn.dropout(conv2_pool, keep_prob=keep_prob)\n",
    "\n",
    "# the third block of convolution layers\n",
    "conv3_1 = conv_layer(conv2_drop, shape=[3,3,64,128])\n",
    "conv3_2 = conv_layer(conv3_1, shape=[3,3,128,128])\n",
    "conv3_3 = conv_layer(conv3_2, shape=[3,3,128,128])\n",
    "conv3_pool = tf.nn.max_pool(conv3_3, ksize=[1,2,2,1], strides=[1,2,2,1], padding=\"SAME\")\n",
    "conv3_drop = tf.nn.dropout(conv3_pool, keep_prob=keep_prob)\n",
    "\n",
    "#ready for fully_connected\n",
    "conv3_flat = tf.reshape(conv3_pool, [-1, 4*4*128])\n",
    "conv3_drop = tf.nn.dropout(conv3_flat, keep_prob = keep_prob)\n",
    "full1 = tf.nn.relu(fully_connected(conv3_flat, 512))\n",
    "full1_drop = tf.nn.dropout(full1,keep_prob=keep_prob)\n",
    "\n",
    "# And finally the logits\n",
    "y_conv = fully_connected(full1_drop, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "xentropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=y_conv, labels=y))\n",
    "train = tf.train.AdamOptimizer(1e-4).minimize(xentropy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "correct = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y, 1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "steps = 200000 #It takes many steps to converge\n",
    "batch_size = 50\n",
    "\n",
    "final_accuracy = 0\n",
    "saver = tf.train.Saver()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    \n",
    "    for i in range(steps):\n",
    "        batch = mnist.train.next_batch(batch_size)\n",
    "        sess.run(train, feed_dict={X: batch[0], y: batch[1], keep_prob: 0.5})\n",
    "        \n",
    "        if (i+1) % 5000 == 0:\n",
    "            train_accuracy = sess.run(accuracy, feed_dict={X: batch[0], y: batch[1], keep_prob: 1.0})\n",
    "            test_accuracy = sess.run(accuracy, feed_dict={X: mnist.test.images, y: mnist.test.labels, keep_prob: 1.0})\n",
    "            print(\"Step {}, \\tTraining accuracy {:.4f}, \\tTest accuarcy {:.4f}\".format((i+1), train_accuracy, test_accuracy))\n",
    "            if test_accuracy > final_accuracy:\n",
    "                final_accuracy = test_accuracy\n",
    "                save_model = saver.save(sess, \"models/CNN_MNIST_final.ckpt\")\n",
    "    print(\"\\nFinal Accuracy {}\".format(final_accuracy))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
